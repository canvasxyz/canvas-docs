"use strict";(self.webpackChunkcanvas_docs=self.webpackChunkcanvas_docs||[]).push([[413],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),g=c(t),m=i,u=g["".concat(l,".").concat(m)]||g[m]||p[m]||s;return t?a.createElement(u,r(r({ref:n},d),{},{components:t})):a.createElement(u,r({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,r=new Array(s);r[0]=g;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var c=2;c<s;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},8985:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=t(7462),i=(t(7294),t(3905));const s={},r="@canvas-js/interfaces",o={unversionedId:"canvas/packages/interfaces/README",id:"canvas/packages/interfaces/README",title:"@canvas-js/interfaces",description:"This package exports TypeScript types for Canvas messages and other interfaces, along with some serialization utility methods.",source:"@site/docs/canvas/packages/interfaces/README.md",sourceDirName:"canvas/packages/interfaces",slug:"/canvas/packages/interfaces/",permalink:"/docs/canvas/packages/interfaces/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"@canvas-js/core",permalink:"/docs/canvas/packages/core/"}},l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Messages",id:"messages",level:2},{value:"Sessions",id:"sessions",level:3},{value:"Actions",id:"actions",level:3},{value:"Custom actions",id:"custom-actions",level:3},{value:"Models",id:"models",level:2},{value:"Chain Implementations",id:"chain-implementations",level:2},{value:"Serialization methods",id:"serialization-methods",level:2}],d={toc:c};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"canvas-jsinterfaces"},"@canvas-js/interfaces"),(0,i.kt)("p",null,"This package exports TypeScript types for Canvas messages and other interfaces, along with some serialization utility methods."),(0,i.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#messages"},"Messages"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sessions"},"Sessions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#actions"},"Actions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#custom-actions"},"Custom actions")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#models"},"Models")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#chain-implementations"},"Chain Implementations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#serialization-methods"},"Serialization methods"))),(0,i.kt)("h2",{id:"messages"},"Messages"),(0,i.kt)("p",null,"Canvas operates on two basic types of messages: ",(0,i.kt)("em",{parentName:"p"},"actions")," and ",(0,i.kt)("em",{parentName:"p"},"sessions"),". Actions are signed function calls that are evaluated by the contract; sessions are used to authorize delegate keys so that users don't have to directly sign every action they want to take."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export type Message = Action | Session | CustomAction\n")),(0,i.kt)("h3",{id:"sessions"},"Sessions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * A user can sign a `Session` to authorize a delegate key to sign actions on their behalf.\n *\n * The signature, address, and blockhash formats vary by chain.\n */\nexport type Session = {\n  type: "session"\n  signature: string\n  payload: {\n    // The ipfs://... URI of the app contract\n    app: string\n\n    // CAIP-2 identifier for a chain supported by the app contract\n    chain: string\n\n    // address of the user authorizing the session\n    from: string\n\n    sessionAddress: string  // public address of the delegate key\n    sessionDuration: number // duration in milliseconds\n    sessionIssued: number   // issue time in milliseconds since 1 January 1970 00:00:00 UTC\n\n    // Blockhash of `chain` at issue time; required by peers except in --unchecked mode.\n    // Used to validate `sessionIssued`.\n    block: string | null\n  }\n}\n\nexport type SessionPayload = Session["payload"]\n')),(0,i.kt)("h3",{id:"actions"},"Actions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * An `Action` is either signed directly by a user or indirectly through a session.\n * The address recovered from verifying the signature must match `action.session`\n * if `action.session !== null`, or else must match `action.payload.from`.\n * \n * The signature, address, and blockhash formats vary by chain.\n */\nexport type Action = {\n  type: "action"\n  signature: string\n  session: string | null\n  payload: {\n    // The ipfs://... URI of the app contract\n    app: string\n\n    // CAIP-2 identifier for a chain supported by the app contract\n    chain: string\n\n    // address of the user signing the action\n    from: string\n\n    // name and arguments of the contract function to invoke.\n    // action arguments are the JSON primitives `null | boolean | number | string`\n    call: string\n    callArgs: Record<string, ActionArgument>\n\n    // Blockhash of `chain` at `timestamp`; required by peers except in --unchecked mode.\n    // Used to validate `timestamp` and call external on-chain contracts.\n    block: string | null\n\n    // milliseconds since 1 January 1970 00:00:00 UTC\n    timestamp: number\n  }\n}\n\nexport type ActionPayload = Action["payload"]\n\nexport type ActionArgument = null | boolean | number | string\n')),(0,i.kt)("h3",{id:"custom-actions"},"Custom actions"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f This is an advanced use case that is likely to evolve. Use with caution.")),(0,i.kt)("p",null,'Contracts can also optionally export a handler for "custom actions", which are unsigned payloads validating an application-defined JSON Schema document.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'export type CustomAction = {\n  type: "customAction"\n  name: string\n  payload: any\n  app: string\n}\n')),(0,i.kt)("h2",{id:"models"},"Models"),(0,i.kt)("p",null,"Canvas contracts export a set of model types, which are schemas for the application database that the action handlers in the contract can write to."),(0,i.kt)("p",null,"The model schemas are very simple, consisting of just "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * A `ModelType` is a value-level representation of a model field type.\n * used as the TypeScript type for model field *types*.\n */\nexport type ModelType = "boolean" | "string" | "integer" | "float" | "datetime"\n\n/**\n * A `ModelValue` is a type-level representation of a model field types,\n * used as the TypeScript type for model field *values*.\n */\nexport type ModelValue = null | boolean | number | string\n\n/**\n * An `Index` defines a list of database indexes to be generated and maintained for a model.\n */\nexport type Index = string | string[]\n\n/**\n * A `Model` is a map of property names to `ModelType` types.\n * All models must have `id: "string"` and `updated_at: "datetime"` properties.\n */\nexport type Model = {\n  id: "string"; \n  updated_at: "datetime";\n  indexes?: Index[];\n} & Record<string, ModelType>\n\n')),(0,i.kt)("h2",{id:"chain-implementations"},"Chain Implementations"),(0,i.kt)("p",null,"Canvas is designed to be chain-agnostic, but it needs to know something about the chains so that it can validate signatures and blockhashes. The methods necessary for this are encapsulated in the ",(0,i.kt)("inlineCode",{parentName:"p"},"ChainImplementation")," interface."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ChainImplementation")," is generic in two parameters ",(0,i.kt)("inlineCode",{parentName:"p"},"Signer")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DelegatedSigner"),", which in each chain implementation class are instantiated with the appropriate chain-specific type. ",(0,i.kt)("inlineCode",{parentName:"p"},"Signer")," is for direct interactions with the user, and ",(0,i.kt)("inlineCode",{parentName:"p"},"DelegatedSigner")," is whatever the delegated key or private wallet class is appropriate for the chain. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"EthereumChainImplementation")," is declared as a ",(0,i.kt)("inlineCode",{parentName:"p"},"ChainImplementation<ethers.Signer, ethers.Wallet>"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ChainImplementation<Signer = unknown, DelegatedSigner = unknown> {\n  /* CAIP-2 chain identifier */\n  chain: string\n\n  /**\n   * Signature verification methods \n   *\n   * These are used internally by peers when applying actions and sessions.\n   */\n\n  // verify an action signature\n  verifyAction(action: Action): Promise<void>\n\n  // verify a session signature\n  verifySession(session: Session): Promise<void>\n\n  /**\n   * Signature generation / delegate signer lifecycle methods \n   * \n   * These are used by the front-end client library @canvas-js/hooks\n   * to streamline automated session management and \n   */\n\n  // use the signer to sign a session payload\n  signSession(signer: Signer, payload: SessionPayload): Promise<Session>\n\n  // use the signer to directly sign an action payload\n  signAction(signer: Signer, payload: ActionPayload): Promise<Action>\n\n  // use the delegated signer to sign an action payload\n  signDelegatedAction(delegatedSigner: DelegatedSigner, payload: ActionPayload): Promise<Action>\n\n  // get the address of a signer\n  getSignerAddress(signer: Signer): Promise<string>\n\n  // get the address of a delegated signer\n  getDelegatedSignerAddress(delegatedSigner: DelegatedSigner): Promise<string>\n\n  // create a new delegate signer instance\n  generateDelegatedSigner(): Promise<DelegatedSigner>\n\n  // export a delegate signer's private key to a string\n  exportDelegatedSigner(delegatedSigner: DelegatedSigner): string\n\n  // import a delegate signer from an exported private key\n  importDelegatedSigner(privateKey: string): DelegatedSigner\n\n\n  /**\n   * Provider and blockhash methods\n   */\n\n  // does the chain implementation support fetching blocks?\n  hasProvider(): boolean\n\n  // get the blockhash of the latest block\n  getLatestBlock(): Promise<string>\n}\n")),(0,i.kt)("h2",{id:"serialization-methods"},"Serialization methods"),(0,i.kt)("p",null,"These methods rely on deterministic and canonical JSON serialization, which isn't guaranteed by native ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON.stringify"),". They use the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/BridgeAR/safe-stable-stringify"},(0,i.kt)("inlineCode",{parentName:"a"},"safe-stable-stringify"))," package configured with ",(0,i.kt)("inlineCode",{parentName:"p"},"{ bigint: false, strict: true, deterministic: true }"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * Serialize a `SessionPayload` into a string suitable for signing on non-ETH chains.\n * The format is equivalent to JSON.stringify() with sorted object keys.\n */\ndeclare function serializeSessionPayload(payload: SessionPayload): string\n\n/**\n * Serialize an `ActionPayload` into a string suitable for signing on non-ETH chains.\n * The format is equivalent to JSON.stringify() with sorted object keys.\n */\ndeclare function serializeActionPayload(payload: ActionPayload): string\n\n/**\n * Get the hash identifier of an action or session.\n * Messages are identified by the sha256 hash of their canonical JSON serialization.\n */\ndeclare function getMessageHash(message: Message): string\n")))}p.isMDXComponent=!0}}]);