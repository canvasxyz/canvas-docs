"use strict";(self.webpackChunkcanvas_docs=self.webpackChunkcanvas_docs||[]).push([[207],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7480:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:3,title:"Contract Language"},s="Contract Language",i={unversionedId:"api",id:"api",title:"Contract Language",description:"Each Canvas application is defined as a single file, with JavaScript",source:"@site/docs/api.md",sourceDirName:".",slug:"/api",permalink:"/docs/api",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Contract Language"},sidebar:"sidebar",previous:{title:"Canvas Hub",permalink:"/docs/tutorial/canvas-hub"},next:{title:"Basic Data Formats",permalink:"/docs/formats"}},l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Models",id:"models",level:2},{value:"Routes",id:"routes",level:2},{value:"Actions",id:"actions",level:2},{value:"Contracts",id:"contracts",level:2},{value:"Sources",id:"sources",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"contract-language"},"Contract Language"),(0,r.kt)("p",null,"Each Canvas application is defined as a single file, with JavaScript\nexports for models, routes, actions, and configuration, executed\ninside a ",(0,r.kt)("a",{parentName:"p",href:"https://bellard.org/quickjs/"},"sandboxed ES2020 runtime"),"."),(0,r.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#configuration"},"Configuration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#models"},"Models")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#routes"},"Routes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#actions"},"Actions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#contracts"},"Contracts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sources"},"Sources"))),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"An application name is shown to users when logging into the\napplication on some chains. Currently, this is only used in the\nEIP-712 signing flow for EVM-based chains, and it's optional:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// Optional. If no name is provided, login flows will prompt for\n// "Canvas" as the application name where required.\n\nexport const name = "My Application"\n')),(0,r.kt)("h2",{id:"models"},"Models"),(0,r.kt)("p",null,"Models define SQLite database tables used by the application, which\nare automatically created when the application is started."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Models must include an ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"updated_at")," field, with a string and\ndatetime type respectively."),(0,r.kt)("li",{parentName:"ul"},"Models may also include a list of ",(0,r.kt)("inlineCode",{parentName:"li"},"indexes"),". Indexes are defined by\nnaming the column(s) indexed, and may be defined over a single column\nor multiple columns."),(0,r.kt)("li",{parentName:"ul"},"Models support ",(0,r.kt)("inlineCode",{parentName:"li"},"boolean"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"integer"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"float"),", and\n",(0,r.kt)("inlineCode",{parentName:"li"},"datetime")," types.")),(0,r.kt)("p",null,"We automatically translate between JavaScript and SQLite data types,\nso for example, datetimes are stored as integers. Refer to our\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/canvasxyz/canvas/blob/main/packages/interfaces/src/models.ts"},"interfaces")," for more info."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'export const models = {\n  posts: {\n    id: "string",\n    content: "string",\n    from_id: "string",\n    updated_at: "datetime",\n    indexes: [["updated_at"], ["from_id", "updated_at"]]\n  }\n}\n')),(0,r.kt)("h2",{id:"routes"},"Routes"),(0,r.kt)("p",null,"Routes are functions that can read from the database, which are automatically\nserved on the application's API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'export const routes = {\n  "/posts": ({}, { db }) =>\n    db.queryRaw("SELECT * FROM posts ORDER BY posts.updated_at DESC")\n}\n')),(0,r.kt)("p",null,"Each route takes two arguments, ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"context"),". Params\nincludes both path parameters (e.g.  ",(0,r.kt)("inlineCode",{parentName:"p"},"/posts/:address"),") and query\nparameters (",(0,r.kt)("inlineCode",{parentName:"p"},"/posts?address=<0x123>"),") passed to the route."),(0,r.kt)("p",null,"The context argument includes a ",(0,r.kt)("inlineCode",{parentName:"p"},"db")," object, which can be used to read\nfrom the database. In this example, a request to ",(0,r.kt)("inlineCode",{parentName:"p"},"/posts")," uses the\ndefault offset = 0, while ",(0,r.kt)("inlineCode",{parentName:"p"},"/posts?offset=10")," would query the database\nfor posts with offset = 10:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'export const routes = {\n  "/posts": ({ offset = 0 }, { db }) =>\n    db.queryRaw(\n      `SELECT id, from_id, content, updated_at FROM posts\n       ORDER BY updated_at DESC LIMIT 50 OFFSET :offset`, { offset })\n}\n')),(0,r.kt)("p",null,"Currently, queryRaw is lazily executed; it returns a cursor that you\nreturn from the route function, and your node will execute the query\nfor you after the route finishes execution."),(0,r.kt)("p",null,"You can refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://www.sqlite.org/lang_expr.html"},"SQLite\nreference")," for more advanced\nquery strategies. Here are a few examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use GROUP BY and ",(0,r.kt)("a",{parentName:"li",href:"https://www.sqlite.org/lang_aggfunc.html"},"aggregate\nfunctions")," like count(),\nmin(), max(), sum(), and total() to compute summary statistics."),(0,r.kt)("li",{parentName:"ul"},"Use GROUP BY, LEFT JOIN, and\n",(0,r.kt)("a",{parentName:"li",href:"https://www.sqlite.org/lang_aggfunc.html#group_concat"},"group_concat()"),"\nto create a list of objects and their associations.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export const routes = {\n  \"/posts_with_reacts\": ({ offset = 0 }, { db }) =>\n    db.queryRaw(`\n      SELECT posts.*,\n        group_concat(reacts.creator || ':' || reacts.value, ';') AS reacts\n      FROM posts\n      LEFT JOIN reacts ON posts.id = reacts.message_id\n      GROUP BY posts.id\n      ORDER BY updated_at DESC LIMIT 50 OFFSET :offset`, { offset }),\n}\n")),(0,r.kt)("p",null,"Here, we fetch a list of reactions to posts, using LEFT JOIN so every\nrow in ",(0,r.kt)("inlineCode",{parentName:"p"},"posts")," is returned regardless of whether or not it has\nreactions. If there are any ",(0,r.kt)("inlineCode",{parentName:"p"},"reacts")," matching the post, we combine\nthem into a string using ",(0,r.kt)("inlineCode",{parentName:"p"},"group_concat()")," and return them grouped by\npost."),(0,r.kt)("p",null,"When using joins like these, make sure to double-check that you have\nthe proper indexes on your models! It's easy to miss an index, which\ncan slow down your queries significantly."),(0,r.kt)("h2",{id:"actions"},"Actions"),(0,r.kt)("p",null,"Actions are how users write to the database in Canvas\napplications. For example, an action could include broadcasting a\nmessage in a game, or creating a thread in a forum."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export const actions = {\n  createPost({ content }, { db, from, hash, timestamp, contracts }) {\n    db.posts.set(this.hash, { content, from_id: from })\n  },\n}\n")),(0,r.kt)("p",null,"Each action receives ",(0,r.kt)("inlineCode",{parentName:"p"},"args")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"context")," objects. ",(0,r.kt)("inlineCode",{parentName:"p"},"args")," is populated\nwith arguments passed to the action, and ",(0,r.kt)("inlineCode",{parentName:"p"},"context")," is populated with\neverything else needed to process the action:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hash")," is the unique hash of the action. This is defined as the\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/canvasxyz/canvas/blob/main/packages/interfaces/src/actions.ts"},"hash"),"\nof the stringified action object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"from")," is the address or public key that produced the action. If the\naction is signed with a session key, this is the address used to\nauthorize the session key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timestamp")," is the timestamp of the action, provided by the user."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"db")," is an object used for writing to the database.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"db.table.set(key, data)")," creates or updates the data for that key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"db.table.delete(key)")," deletes the data corresponding to that key."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"contracts")," provides an interface for querying on-chain smart contracts.")),(0,r.kt)("p",null,"Actions will always be processed in the order in which they were\nsigned, as reported by the user, so a past-dated action will never\noverwrite the output of a recent-dated action."),(0,r.kt)("h2",{id:"contracts"},"Contracts"),(0,r.kt)("p",null,"To read from chains, we provide contract hooks, which you can use by\nexporting a global ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts")," variable. When starting up, the Canvas\nnode will ensure that the user has provided an RPC URL for it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'export const contracts = {\n  bibos: {\n    chain: "eth",\n    chainId: 1,\n    address: "0xF528e3381372c43F5e8a55b3E6c252E32F1a26e4",\n    abi: ["function balanceOf(address owner) view returns (uint balance)"],\n  },\n};\n')),(0,r.kt)("p",null,"Canvas uses ",(0,r.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/api/utils/abi/interface/"},"Ethers v5's human-readable ABI\nstandard"),", where\neach function in the ABI is described with a string. You don't have to\ninclude every function that the contract supports, ",(0,r.kt)("a",{parentName:"p",href:"https://blog.ricmoo.com/human-readable-contract-abis-in-ethers-js-141902f4d917"},"just the ones you\nuse"),"."),(0,r.kt)("p",null,"Then, you can use the contracts variable inside the action context:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'export const actions = {\n  async createPost({ content }, { db, from, hash, timestamp, contracts }) {\n    if ((await contracts.bibos.balanceOf(from)) === "0") return false\n    db.posts.set(hash, { content, from_id: from })\n  },\n}\n')),(0,r.kt)("h2",{id:"sources"},"Sources"),(0,r.kt)("p",null,"Sources are references to previous contracts, which can be used to\nsoft-fork past applications by importing their actions."),(0,r.kt)("p",null,"When running a contract with sources, we automatically join the libp2p\ngossipsub meshes for those sources, and process and import any actions\nseen on them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const previousApp = "Qm..."\n\nexport const sources = {\n  [previousApp]: {\n    createPost({ content }, { db, hash, from }) {\n      db.posts.set(hash, { content, from })\n    },\n  },\n}\n')),(0,r.kt)("p",null,"Each source should include action handlers for the actions it\nimports. You can reuse action handlers declared earlier:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export const sources = {\n  [previousApp]: {\n    createPost: actions.createPost\n  },\n  [additionalApp]: { ...actions }\n}\n")),(0,r.kt)("p",null,"Sources are ",(0,r.kt)("em",{parentName:"p"},"not")," transitive; to import data from a contract imported\nby a previous contract, you must define it explicitly. This is because\nwe don't have a way to retrieve the code of previous contracts."),(0,r.kt)("p",null,"To see sources in action, take a look at the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/canvasxyz/canvas/blob/main/packages/core/test/sources.test.ts"},"unit\ntests"),"."))}u.isMDXComponent=!0}}]);