"use strict";(self.webpackChunkcanvas_docs=self.webpackChunkcanvas_docs||[]).push([[103],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=o,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return t?a.createElement(h,i(i({ref:n},p),{},{components:t})):a.createElement(h,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7642:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=t(7462),o=(t(7294),t(3905));const r={sidebar_position:2},i="Connecting a frontend",s={unversionedId:"tutorial/writing-a-canvas-frontend",id:"tutorial/writing-a-canvas-frontend",title:"Connecting a frontend",description:"Now that we have a working Canvas backend, we'll connect it to a frontend using wagmi and ConnectKit.",source:"@site/docs/tutorial/writing-a-canvas-frontend.md",sourceDirName:"tutorial",slug:"/tutorial/writing-a-canvas-frontend",permalink:"/docs/tutorial/writing-a-canvas-frontend",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebar",previous:{title:"Writing a contract",permalink:"/docs/tutorial/writing-a-canvas-contract"},next:{title:"Reading on-chain data",permalink:"/docs/tutorial/reading-from-chains"}},c={},l=[{value:"Starting a Canvas node",id:"starting-a-canvas-node",level:2},{value:"Setting up a new frontend",id:"setting-up-a-new-frontend",level:2},{value:"Connecting a wallet and posting actions",id:"connecting-a-wallet-and-posting-actions",level:2},{value:"How sessions work",id:"how-sessions-work",level:2}],p=(u="App",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var u;const d={toc:l};function m(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"connecting-a-frontend"},"Connecting a frontend"),(0,o.kt)("p",null,"Now that we have a working Canvas backend, we'll connect it to a frontend using ",(0,o.kt)("a",{parentName:"p",href:"https://wagmi.sh"},"wagmi")," and ",(0,o.kt)("a",{parentName:"p",href:"https://docs.family.co/connectkit"},"ConnectKit"),"."),(0,o.kt)("p",null,"To follow along with this tutorial, you should have Metamask installed. You won't need any tokens, but you will need an Ethereum address."),(0,o.kt)("h2",{id:"starting-a-canvas-node"},"Starting a Canvas node"),(0,o.kt)("p",null,"First you should have a Canvas node running in the background. You can\nuse the example app from the last tutorial, or run ",(0,o.kt)("inlineCode",{parentName:"p"},"canvas init\nspec.canvas.js")," to generate a new one."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"canvas run spec.canvas.js\n")),(0,o.kt)("h2",{id:"setting-up-a-new-frontend"},"Setting up a new frontend"),(0,o.kt)("p",null,"Now, start by creating a React app, and installing dependencies. (For Typescript, add ",(0,o.kt)("inlineCode",{parentName:"p"},"--template typescript")," when running create-react-app.)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-react-app canvas-demo\ncd canvas-demo\nnpm install wagmi@0.10.x connectkit ethers @canvas-js/hooks @canvas-js/chain-ethereum\nnpm run start\n")),(0,o.kt)("p",null,"You should now have a starter React application running in your browser."),(0,o.kt)("p",null,"(If you get warnings, run ",(0,o.kt)("inlineCode",{parentName:"p"},"GENERATE_SOURCEMAP=false npm run start")," to\nstart the server. This resolves a known issue where some packages are\nmissing sourcemaps required by Webpack 5.)"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Screenshot of React starter app",src:t(2266).Z,width:"1684",height:"909"})),(0,o.kt)("p",null,"Inside the starter app, open ",(0,o.kt)("inlineCode",{parentName:"p"},"src/index.js")," with your favorite editor. Import wagmi, ConnectKit, and the Canvas hooks and create a wagmi client, and then wrap ",(0,o.kt)(p,{mdxType:"App"})," with the providers we're using."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// keep the previous imports too...\nimport { Canvas } from "@canvas-js/hooks";\nimport { WagmiConfig, createClient } from "wagmi";\nimport { ConnectKitProvider, getDefaultClient } from "connectkit";\n\nconst client = createClient(\n  getDefaultClient({ appName: "Demo App" })\n);\n\nconst root = ReactDOM.createRoot(document.getElementById("root"));\nroot.render(\n  <React.StrictMode>\n    <WagmiConfig client={client}>\n      <ConnectKitProvider>\n        <Canvas host="http://localhost:8000">\n          <App />\n        </Canvas>\n      </ConnectKitProvider>\n    </WagmiConfig>\n  </React.StrictMode>\n);\n')),(0,o.kt)("p",null,"Now, we can add Canvas and ConnectKit components to our application. Inside ",(0,o.kt)("inlineCode",{parentName:"p"},"src/App.js"),", we'll use ",(0,o.kt)("inlineCode",{parentName:"p"},"<ConnectKitButton>")," to log in, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"useRoute()")," hook to fetch data from the backend:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import "./App.css"\nimport { ConnectKitButton } from "connectkit";\nimport { useRoute } from "@canvas-js/hooks";\n\nfunction App() {\n  const { data } = useRoute("/posts");\n\n  return (\n    <div className="App">\n      <header className="App-header">\n        <div>{data?.length || 0} posts</div>\n        <ConnectKitButton />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,o.kt)("p",null,"Save and refresh, and you should see some text on the screen:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Screenshot of app with text that says &quot;0 posts&quot;",src:t(5129).Z,width:"1915",height:"1063"})),(0,o.kt)("h2",{id:"connecting-a-wallet-and-posting-actions"},"Connecting a wallet and posting actions"),(0,o.kt)("p",null,"To create notes in our app, we'll let the user call ",(0,o.kt)("inlineCode",{parentName:"p"},"createPost()")," from the client. We\u2019ll do this by setting up a chain implementation using Canvas and ConnectKit, and then adding a simple input form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import "./App.css"\nimport { ConnectKitButton } from "connectkit";\nimport { useRoute, useSession } from "@canvas-js/hooks";\nimport { EthereumChainImplementation } from "@canvas-js/chain-ethereum"\nimport { useRef, useMemo } from "react";\nimport { useAccount, useSigner, useProvider, useNetwork } from "wagmi";\n\nfunction App() {\n  const { address } = useAccount();\n  const { data: signer } = useSigner()\n  const provider = useProvider()\n  const { chain } = useNetwork()\n\n  const chainImplementation = useMemo(() => {\n    return new EthereumChainImplementation(\n      chain?.id.toString() ?? "1",\n      provider\n    )\n  }, [chain?.id, provider])\n\n  const { sessionAddress, login, client } = useSession(\n    chainImplementation,\n    signer\n  )\n\n  const { data } = useRoute("/posts")\n  const inputRef = useRef()\n\n  return (\n    <div className="App">\n      <header className="App-header">\n        <div>{data?.length || 0} posts</div>\n        <ConnectKitButton />\n        {address && !sessionAddress && <button onClick={login}>Login</button>}\n        <form\n          onSubmit={(e) => {\n            e.preventDefault()\n            client.createPost({ content: inputRef.current.value })\n            inputRef.current.value = ""\n          }}\n        >\n          <input\n            disabled={!sessionAddress}\n            type="text"\n            ref={inputRef}\n            placeholder="What\'s happening?"\n            autoFocus="on"\n          />\n          <input disabled={!sessionAddress} type="submit" value="Post" />\n        </form>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n')),(0,o.kt)("p",null,"While we\u2019re here, we should display the notes that we\u2019ve been creating too. Add this underneath the <form",">"," element:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"<div>\n  {data?.map((row, index) => (\n    <div key={index}>\n      {row.from_id.slice(0, 6)}: {row.content}\n    </div>\n  ))}\n</div>\n")),(0,o.kt)("p",null,"Enter a note and press \u201cSave\u201d. A few things should happen:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Metamask should prompt you to select a wallet."),(0,o.kt)("li",{parentName:"ul"},"Once you accept, you should be asked to sign a message."),(0,o.kt)("li",{parentName:"ul"},"Once you sign the message, the note you\u2019ve just written should appear.")),(0,o.kt)("p",null,"Congratulations! You now have a working application."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Screenshot of app with hello world post",src:t(7721).Z,width:"1738",height:"1092"})),(0,o.kt)("h2",{id:"how-sessions-work"},"How sessions work"),(0,o.kt)("p",null,"You'll notice that only the first time we created a message, you were asked to sign a message. That signature was used to authorize a session key, which is stored in your browser."),(0,o.kt)("p",null,"As long as the session key isn\u2019t expired, you can use it to sign interactions just as you would with your main wallet."),(0,o.kt)("p",null,"To ",(0,o.kt)("em",{parentName:"p"},"fully")," verify a session, we need to check that it was signed with a valid Ethereum block ID. We don't do this yet, because it requires you to provide a connection to an Ethereum node (or another blockchain)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"canvas run example.canvas.js --chain-rpc eth 1 https://mainnet.infura.io/v3/[API_KEY]\n")),(0,o.kt)("p",null,"We'll learn how that works in the next tutorial, when we extend the contract we've written, and enable it to talk to external blockchains."))}m.isMDXComponent=!0},5129:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/react-starter-1-a2c4477f7fb7ee12b57cd292bc766517.png"},7721:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/react-starter-2-a13c504af96df1525146ddda621bd92d.png"},2266:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/react-starter-86865ed8588a9b43e9d09b455aa2db18.png"}}]);