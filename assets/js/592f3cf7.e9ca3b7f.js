"use strict";(self.webpackChunkcanvas_docs=self.webpackChunkcanvas_docs||[]).push([[435],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(g,i(i({ref:n},c),{},{components:t})):a.createElement(g,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5711:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={},i="@canvas-js/core",l={unversionedId:"canvas/packages/core/README",id:"canvas/packages/core/README",title:"@canvas-js/core",description:"A Core verifies, executes, and applies the effects of signed messages.",source:"@site/docs/canvas/packages/core/README.md",sourceDirName:"canvas/packages/core",slug:"/canvas/packages/core/",permalink:"/docs/canvas/packages/core/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Canvas CLI",permalink:"/docs/canvas/packages/cli/"},next:{title:"@canvas-js/interfaces",permalink:"/docs/canvas/packages/interfaces/"}},s={},p=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Configuration options",id:"configuration-options",level:3},{value:"Applying messages",id:"applying-messages",level:3},{value:"Evaluating routes",id:"evaluating-routes",level:3},{value:"Get application metadata",id:"get-application-metadata",level:3},{value:"Development",id:"development",level:2},{value:"Testing",id:"testing",level:2},{value:"API",id:"api",level:2}],c={toc:p};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"canvas-jscore"},"@canvas-js/core"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Core")," verifies, executes, and applies the effects of signed messages."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f The simplest way to run a Canvas application is to use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/canvasxyz/canvas/tree/main/packages/cli"},"CLI")," or Canvas Hub (coming soon). Only use ",(0,r.kt)("inlineCode",{parentName:"p"},"@canvas-js/core")," directly if you're embedding a Canvas app in a browser context or other JavaScript system.")),(0,r.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#installation"},"Installation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#usage"},"Usage"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#configuration-options"},"Configuration options")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#applying-messages"},"Applying messages")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#evaluating-routes"},"Evaluating routes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#get-application-metadata"},"Get application metadata")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#development"},"Development")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#testing"},"Testing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#api"},"API"))),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ npm i @canvas-js/core\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"To initialize a core, import ",(0,r.kt)("inlineCode",{parentName:"p"},"@canvas-js/core")," and call ",(0,r.kt)("inlineCode",{parentName:"p"},"Core.initialize({ ... })")," with the contract and path to application data directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { Core } from "@canvas-js/core"\n\nconst contract = `// A sample Canvas application\nexport const models = {\n  posts: {\n    id: "string",\n    updated_at: "datetime",\n    from: "string",\n    content: "string",\n  }\n}\n\nexport const actions = {\n  createPost({ content }, { hash, from, db }) {\n    const postId = from + "/" + hash\n    db.posts.set(postId, { content })\n  },\n  deletePost({ postId }, { from, db }) {\n    assert(postId.startsWith(from + "/"))\n    db.posts.delete(postId)\n  },\n}\n\nexport const routes = { \n  "/all": ({}) => "SELECT * FROM posts"\n}\n`\n\nconst core = await Core.initialize({\n  spec: contract,\n  directory: null, // run in-memory\n  unchecked: true, // don\'t require blockhashes\n  offline: true,   // don\'t start libp2p\n})\n\nconsole.log(core.app) // ipfs://QmTFwv6NF78V64CVdWrabYhQhmV4bWJw63aTRcVhvBAU2u\n')),(0,r.kt)("p",null,"Applications are identified by the ",(0,r.kt)("inlineCode",{parentName:"p"},"ipfs://...")," hash of the contract. Sessions and actions must have contract's ",(0,r.kt)("inlineCode",{parentName:"p"},"ipfs://...")," URI in ",(0,r.kt)("inlineCode",{parentName:"p"},"payload.app"),"."),(0,r.kt)("h3",{id:"configuration-options"},"Configuration options"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"spec")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"directory")," are the only values strictly required, but in general running a ",(0,r.kt)("inlineCode",{parentName:"p"},"Core")," involves understanding and configuring several additional properties."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"declare interface CoreOptions {\n  unchecked?: boolean // don't require or validate blockhashes in messages\n  verbose?: boolean // print verbose logging to stdout\n  offline?: boolean // disable libp2p\n  replay?: boolean  // replay the entire message log on start-up\n}\n\ndeclare interface CoreConfig extends CoreOptions {\n  // Path to application data directory, or `null` to run in-memory (NodeJS only)\n  directory: string | null\n\n  // Full text of the contract to run.\n  spec: string\n\n  // Provide chain implementations for the chains declared by the contract.\n  // Defaults to [new EthereumChainImplementation(1, \"localhost\")] if not provided.\n  // Core.intialize will throw an error if there are any chains delcared by the\n  // contract that have no implementations provided here.\n  chains?: ChainImplementation<unknown, unknown>[]\n\n  // Internal /ws multiaddrs to listen for libp2p connections.\n  // These should be local addresses, most likely `/ip4/0.0.0.0/tcp/${port}/ws`.\n  // If not provided, the core will join the libp2p mesh via the public relay servers.\n  listen?: string[] \n\n  // External /ws and /wss multiaddrs to announce to the DHT.\n  // These should be publicly-resolvable, most likely `/dns4/${hostname}/tcp/${port}/wss`.\n  announce?: string[]\n\n  // Override the default list of libp2p bootstrap/relay servers.\n  // Must be an array of multiaddrs for libp2p servers supporting circuit-relay v2.\n  bootstrapList?: string[]\n\n  // Set a custom app URI. Defaults to ipfs:// of spec. Don't use this!\n  uri?: string\n}\n")),(0,r.kt)("h3",{id:"applying-messages"},"Applying messages"),(0,r.kt)("p",null,"Once you have a core running, you can apply messages using ",(0,r.kt)("inlineCode",{parentName:"p"},"core.apply"),", which returns a promise resolving to an object ",(0,r.kt)("inlineCode",{parentName:"p"},"{ hash: string }")," containin the hash of the message if it succeeds, or rejecting with an error if it fails."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { EthereumChainImplementation } from \"@canvas-js/chain-ethereum\"\n\n// ...\n\nconst chain = new EthereumChainImplementation(1) // ethereum mainnet\nconst wallet = ethers.Wallet.createRandom()\n\nconsole.log(wallet.address) // 0x6431584d547d210560Cd170CeF61cF7eE8486013\n\nconst action = await chain.signAction(wallet, {\n  from: wallet.address,\n  app: core.app,\n  call: \"createPost\",\n  callArgs: { content: \"hello world\" },\n  timestamp: Date.now(),\n  chain: chain.chain,\n  block: null,\n})\n\n// {\n//   type: 'action',\n//   signature: '0xfe715f94239d5e4b8db86e424e373e9378d7e92ab392cc5996cddbebf2860eda4b0625f7be6de551ec9563b361809ae8fd6af5711c882b2c86323052d10675031c',\n//   session: null,\n//   payload: {\n//     from: '0x6431584d547d210560Cd170CeF61cF7eE8486013',\n//     app: 'ipfs://QmcHBPw1gVvrTDUbqAtNfgDBndmbBpbDmnps9CLnbH5YQk',\n//     call: 'createPost',\n//     callArgs: { content: 'hello world' },\n//     timestamp: 1681857137057,\n//     chain: 'eip155:1',\n//     block: null\n//   }\n// }\n\nconst { hash } = await core.apply(action)\nconsole.log(hash) // 0x4a45a783cfecab42b0b14a0fb239dc95d17df47a2d49ddb1259d431519a45c48\n")),(0,r.kt)("h3",{id:"evaluating-routes"},"Evaluating routes"),(0,r.kt)("p",null,"You can evaluate the SQL routes with ",(0,r.kt)("inlineCode",{parentName:"p"},"core.getRoute"),", which takes the full string route name and an optional object of parameter values. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const posts = await core.getRoute(\"/all\")\n// [\n//   {\n//     id: '0x6431584d547d210560Cd170CeF61cF7eE8486013/0x4a45a783cfecab42b0b14a0fb239dc95d17df47a2d49ddb1259d431519a45c48',\n//     updated_at: 1681857375435,\n//     content: 'hello world',\n//     from: '0x6431584d547d210560Cd170CeF61cF7eE8486013'\n//   }\n// ]\n")),(0,r.kt)("h3",{id:"get-application-metadata"},"Get application metadata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const data = await core.getApplicationData()\n// {\n//   peerId: null, // null if in offline mode\n//   uri: 'ipfs://QmcHBPw1gVvrTDUbqAtNfgDBndmbBpbDmnps9CLnbH5YQk',\n//   cid: 'QmcHBPw1gVvrTDUbqAtNfgDBndmbBpbDmnps9CLnbH5YQk',\n//   actions: [ 'createPost', 'deletePost' ],\n//   routes: [ '/all' ],\n//   chains: [ 'eip155:1' ],\n//   peers: [],\n//   merkleRoots: {}\n// }\n")),(0,r.kt)("h2",{id:"development"},"Development"),(0,r.kt)("p",null,"Regenerate the RPC protobuf message types with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run generate-rpc"),"."),(0,r.kt)("p",null,"The package should be built with typescript in composite build mode from the repo root, not from the package directory here."),(0,r.kt)("h2",{id:"testing"},"Testing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm run test\n")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { CID } from "multiformats/cid"\nimport { Libp2p } from "libp2p"\n\nimport { Message, ModelValue, Model, Chain, ChainId, ApplicationData } from "@canvas-js/interfaces"\n\ndeclare interface CoreOptions {\n  unchecked?: boolean\n  verbose?: boolean\n  offline?: boolean\n  replay?: boolean\n}\n\ndeclare interface CoreConfig extends CoreOptions {\n  directory: string | null\n  spec: string\n  chains?: ChainImplementation<unknown, unknown>[]\n  listen?: string[]\n  announce?: string[]\n  bootstrapList?: string[]\n  uri?: string\n}\n\ndeclare class Core extends EventEmitter<CoreEvents> implements CoreAPI {\n  public static initialize(config: CoreConfig): Promise<Core>\n\n  public readonly app: string\n  public readonly cid: CID\n  public readonly directory: string | null\n  public readonly libp2p: Libp2p | null\n\n  public close(): Promise<void>\n  public apply(message: Message): Promise<{ hash: string }>\n  public getRoute(route: string, params: Record<string, string>): Promise<Record<string, ModelValue>[]>\n  public getApplicationData(): Promise<ApplicationData>\n}\n')))}d.isMDXComponent=!0}}]);