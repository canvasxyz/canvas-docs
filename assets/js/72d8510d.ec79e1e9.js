"use strict";(self.webpackChunkcanvas_docs=self.webpackChunkcanvas_docs||[]).push([[372],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,v=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(v,o(o({ref:t},u),{},{components:n})):a.createElement(v,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},528:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={},o="Developer Guide",l={unversionedId:"canvas/DEVELOPING",id:"canvas/DEVELOPING",title:"Developer Guide",description:"Building",source:"@site/docs/canvas/DEVELOPING.md",sourceDirName:"canvas",slug:"/canvas/DEVELOPING",permalink:"/docs/canvas/DEVELOPING",draft:!1,tags:[],version:"current",frontMatter:{}},s={},p=[{value:"Building",id:"building",level:3},{value:"Using a development instance of Canvas",id:"using-a-development-instance-of-canvas",level:3},{value:"Publishing to NPM",id:"publishing-to-npm",level:3},{value:"Linting and Code Formatting",id:"linting-and-code-formatting",level:3},{value:"Testing",id:"testing",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"developer-guide"},"Developer Guide"),(0,r.kt)("h3",{id:"building"},"Building"),(0,r.kt)("p",null,"Canvas is configured as a composite TypeScript project using project\nreferences and must be compiled with build mode turned on. Build all\ncore packages in parallel with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm run dev\n")),(0,r.kt)("p",null,"To run the example app in development mode:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm run dev-example-chat\n")),(0,r.kt)("h3",{id:"using-a-development-instance-of-canvas"},"Using a development instance of Canvas"),(0,r.kt)("p",null,"To use your local development version of Canvas in the CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./install.sh\n")),(0,r.kt)("p",null,"This will put a stub shell script at ",(0,r.kt)("inlineCode",{parentName:"p"},"$(npm config get prefix)/bin/canvas"),"\nthat calls ",(0,r.kt)("inlineCode",{parentName:"p"},"node ${PWD}/packages/cli/index.js $@"),"."),(0,r.kt)("p",null,"Note that if you are using system Node, writing to /usr/local/bin/canvas\nwill require sudo. In that case, you should install\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nvm-sh/nvm#installing-and-updating"},"NVM")," and set your\ndefault Node with ",(0,r.kt)("inlineCode",{parentName:"p"},"nvm alias default v18"),"."),(0,r.kt)("h3",{id:"publishing-to-npm"},"Publishing to NPM"),(0,r.kt)("p",null,"Before publishing, make sure the project is in a clean state and passes tests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ npm run clean\n$ npm run build\n$ npm run test\n")),(0,r.kt)("p",null,"Make sure you've commited your changes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ git status\n$ git add .\n$ git commit -m "made some changes"\n')),(0,r.kt)("p",null,"There is a bug in the NPM CLI that causes some workspace packages to not update their dependencies to other workspace packages to the new version. As a workaround, we have a custom script in ",(0,r.kt)("inlineCode",{parentName:"p"},"version.sh")," that sets the version and dependencies for all the modules in ",(0,r.kt)("inlineCode",{parentName:"p"},"packages/")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"examples/"),". Pass an explicit a ",(0,r.kt)("inlineCode",{parentName:"p"},"0.0.X")," version number as the first argument:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ ./version.sh 0.0.X\n")),(0,r.kt)("p",null,"Then make a manual commit just for the version bump, and publish the packages together:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ git add .\n$ git commit -m "v0.0.X"\n$ npm run publish\n')),(0,r.kt)("p",null,"When the bug is fixed, we should be able to replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"version.sh")," script with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm version --git-tag-version=false --workspaces=true --include-workspace-root=true --workspaces-update=true --save --save-exact"),"."),(0,r.kt)("h3",{id:"linting-and-code-formatting"},"Linting and Code Formatting"),(0,r.kt)("p",null,"We use ",(0,r.kt)("inlineCode",{parentName:"p"},"prettier")," for code formatting. You should install the relevant\nprettier extension for your code editor, which will automatically\nrewrite files as you save them."),(0,r.kt)("p",null,"To format all code using prettier:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"prettier -w .\n")),(0,r.kt)("h3",{id:"testing"},"Testing"),(0,r.kt)("p",null,"Run unit tests with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run test")," from either the repo root or the ",(0,r.kt)("inlineCode",{parentName:"p"},"packages/canvas-core")," directory."),(0,r.kt)("p",null,"If you have a a ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file ",(0,r.kt)("strong",{parentName:"p"},"in the repo root")," with two environment variables..."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"export ETH_CHAIN_ID=1\nexport ETH_CHAIN_RPC=https://mainnet.infura.io/v3/MY_API_KEY\n")),(0,r.kt)("p",null,"... then ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run test")," will also run the contract call tests in ",(0,r.kt)("inlineCode",{parentName:"p"},"packages/canvas-core/test/contracts.test.ts"),". If ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," is missing these tests will be skipped."),(0,r.kt)("p",null,"To run a specific test:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm run test test/sync.test.ts\n")),(0,r.kt)("p",null,"This will try to run ",(0,r.kt)("inlineCode",{parentName:"p"},"test/sync.test.ts")," in each workspace that is configured with tests."))}c.isMDXComponent=!0}}]);